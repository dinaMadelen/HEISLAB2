0c25976e
9
-The code is very well structured With comments that Clearly split the code into parts that are more managable and understandable. Using multiline comments to indicate the start and end of a task is a Nice way to saparate between comments of the acutal code and the divisions that are done for readability.
-The code is very detailed and handels many cases that is not specified in the Project description. e.g. confirming that the adress of incomming messages
- It seems overly complex compared to the Project requirements. for example colorcoating for messeages is a Nice touch but adds nothing to the information information itself and is a detriment to readability of the code itself. print_cosmic_err is a sinner here.
-In general the variable and function names are very good and intuitive, they give a good explanation of what the variable or furnction is/does without a wall of comments.
-Is it necessary to use both UDP and TCP?, would it be beneficial/simpler to use only one to reduce the complexity of the system. There are ways to Ensure the integrity of the communication over UDP, forexample adding sequencing and acknowledgment to your packets instead of using both UDP and TCP.
-Im not an expert but isnt running unsafe{} in a multithreaded program for a mutable global variable (e.g PRINT_INFO_ON) without proper synchronization a problem?
-Do you have any way of knowing if it takes unreasnoable long time to service an order that has been given to an elevator. forexample if there is an obstruction blockign the elevator from proceding is there a way to detct and handle this order?
-Overall it looks very good, and it seems you have full control and are on route to finish With a good product once you have implemented the missing elements.

6e9c22cf
8
-In general the code is well structured and uses Clear and intuitive naming of variables and functions.
-The functions could benefit from having more modules as some modules are getting quite large.
-Need to improve error handeling, and handeling edgecases.

2be0c418
9
- The entry point code is well crafted. Just reading through main.rs alone paints a very clear picure of the things that are happening at the top-level. There are almost no comments in main.rs, but this is not even a problem because of how readable and clean the code is. The project also has a very descriptive and nice readme file that explains the high-level design of the project, and is very helpful to getting to know the codebase. However, since main.rs should be able to be used as a black box (take command line arguments and just work), i feel like there should be a short section early on, either in the readme or a comment in main.rs itself, that breifly describes how the program should be used. What arguments does it take? What does it do? Reading through the args struct gives information about the program args, but it doesn't say what the program does, and i should not have to start reading code to know what arguments to pass to a program.
- From a outside point of view, the choice of module Structure and naming (the interface in general) is good, and gives a clear indication of the functionality of the module. This makes it a lot easier to get up to speed on the codebase, and provides for seamless integration of potential new developers/collaborators.
- From a inside point of view the code has good usage of "modular" functions (smaller functions that call other smaller functions). The code is compact and readable, and despite this the number of small functions is held reasonably low. It could however benefit from a bit more modularity here and there, especially wrapping the handling of "things" inside handler functions. This would make the high-level thought behind the code easier to follow. Having the concrete handling of specific cases in a high-level of abstraction function ruins the readability of the code. If i want to know how a certain case is handled, i should just go to that function. All i need to know in the high-level function is that all cases are probed for and handled accordingly. 
- The details of the code are good. Names are very descriptive, and makes for easy reading. The commenting could be better in the lower-level code. Since the naming is so good, commenting is really not neccessary in the high-level of abstraction code. However in the lower levels, comments can make it easier to follow along, without always having to infer the purpose of some line of code.
- My gut feeling is that this group has handled the project well. The design seems thought through, and the code is well crafted. There could be made some improvements here and there, but this is just nitpicking and well within the capabilities of the group. The proposed improvements just consists of improving the separation of higher and lower level of abstraction code, and adding some comments in lower level code. This is not too hard, and the group could easily manage this. 